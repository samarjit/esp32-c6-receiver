#include <Arduino.h>
#include "driver/mcpwm_prelude.h"
#include "esp_err.h"

// RemoteXY select connection mode and include library 
#define REMOTEXY_MODE__ESP32CORE_BLE

#include <BLEDevice.h>

// RemoteXY connection settings 
#define REMOTEXY_BLUETOOTH_NAME "TestESPc6"

#include <RemoteXY.h>

// RemoteXY GUI configuration  
#pragma pack(push, 1)  
uint8_t RemoteXY_CONF[] =   // 35 bytes
  // { 255,2,0,0,0,38,0,18,0,0,0,31,2,106,200,200,84,1,1,2,
  // 0,4,4,3,30,135,26,1,19,57,0,2,26,4,3,161,101,27,5,68,
  // 191,11,176,2,26 };
 { 255,3,0,0,0,46,0,19,0,0,0,0,31,1,106,200,1,1,3,0,
  4,7,7,22,128,0,2,26,4,0,160,107,20,176,2,26,2,52,13,44,
  22,0,2,26,31,31,79,78,0,79,70,70,0 };

struct {
    // input variables
  int8_t slider_01; // from 0 to 100
  int8_t slider_02; // from 0 to 100
  uint8_t switch_01; // =1 if switch ON and =0 if OFF

    // other variable
  uint8_t connect_flag;  // =1 if wire connected, else =0
} RemoteXY; 
#pragma pack(pop)

#define PIN_SWITCH_01 20
#define MOTOR1_IN1_GPIO 6
#define MOTOR1_IN2_GPIO 7

#define MOTOR2_IN1_GPIO 8
#define MOTOR2_IN2_GPIO 9

#define PWM_FREQUENCY_HZ 1000
#define TIMER_RESOLUTION_HZ 1000000

// void setup_motor_pwm(void);
// void setup_direction_pins(void);
void set_motor_speed(mcpwm_cmpr_handle_t comparator, float speed_percent);
void set_motor_direction(int motor, bool forward);
// void start_motors(void);

typedef struct {
    mcpwm_timer_handle_t timer;
    mcpwm_oper_handle_t oper;
    mcpwm_gen_handle_t generator;
    mcpwm_cmpr_handle_t comparator;
    int pin;
} motor_pwm_t;

// ESP32 C6 has only 1 unit, S3 has 2 units
// Generalized function to initialize a PWM signal
void setup_motor_pwm(
    motor_pwm_t *motor_pwm, int unit_id) {
    // Configure MCPWM timer
    mcpwm_timer_config_t timer_config = {
        .group_id = unit_id,
        .clk_src = MCPWM_TIMER_CLK_SRC_DEFAULT,
        .resolution_hz = TIMER_RESOLUTION_HZ,
        .period_ticks = TIMER_RESOLUTION_HZ / PWM_FREQUENCY_HZ,
    };
    ESP_ERROR_CHECK(mcpwm_new_timer(&timer_config, &motor_pwm->timer));

    // Configure MCPWM operator
    mcpwm_operator_config_t operator_config = {.group_id = unit_id};
    ESP_ERROR_CHECK(mcpwm_new_operator(&operator_config, &motor_pwm->oper));

    // Connect operator to timer
    ESP_ERROR_CHECK(mcpwm_operator_connect_timer(motor_pwm->oper, motor_pwm->timer));

    // Configure MCPWM generator
    mcpwm_generator_config_t generator_config = {.gen_gpio_num = motor_pwm->pin};
    ESP_ERROR_CHECK(mcpwm_new_generator(motor_pwm->oper, &generator_config, &motor_pwm->generator));

    // Configure MCPWM comparator
    mcpwm_comparator_config_t comparator_config = {
        .flags = {.update_cmp_on_tez = true},
    };
    ESP_ERROR_CHECK(mcpwm_new_comparator(motor_pwm->oper, &comparator_config, &motor_pwm->comparator));

    // Set generator actions
    ESP_ERROR_CHECK(mcpwm_generator_set_action_on_timer_event(
        motor_pwm->generator, MCPWM_GEN_TIMER_EVENT_ACTION(MCPWM_TIMER_DIRECTION_UP, MCPWM_TIMER_EVENT_EMPTY, MCPWM_GEN_ACTION_HIGH)));
    ESP_ERROR_CHECK(mcpwm_generator_set_action_on_compare_event(
        motor_pwm->generator, MCPWM_GEN_COMPARE_EVENT_ACTION(MCPWM_TIMER_DIRECTION_UP, motor_pwm->comparator, MCPWM_GEN_ACTION_LOW)));

    // Enable and start the timer
    ESP_ERROR_CHECK(mcpwm_timer_enable(motor_pwm->timer));
    ESP_ERROR_CHECK(mcpwm_timer_start_stop(motor_pwm->timer, MCPWM_TIMER_START_NO_STOP));
}

void setup_direction_pins(void) {
  pinMode(MOTOR1_IN1_GPIO, OUTPUT);
  pinMode(MOTOR2_IN1_GPIO, OUTPUT);
  pinMode(MOTOR1_IN2_GPIO, OUTPUT);
  pinMode(MOTOR2_IN2_GPIO, OUTPUT);
}

void set_motor_direction(int motor, bool forward) {
    if (motor == 1) {
        digitalWrite(MOTOR1_IN1_GPIO, forward ? 1 : 0);
        digitalWrite(MOTOR1_IN2_GPIO, forward ? 0 : 1);
    } else if (motor == 2) {
        digitalWrite(MOTOR2_IN1_GPIO, forward ? 1 : 0);
        digitalWrite(MOTOR2_IN2_GPIO, forward ? 0 : 1);
    }
}

// void start_motors(void) {
//     ESP_ERROR_CHECK(mcpwm_timer_enable(timer1));
//     ESP_ERROR_CHECK(mcpwm_timer_start_stop(timer1, MCPWM_TIMER_START_NO_STOP));

//     ESP_ERROR_CHECK(mcpwm_timer_enable(timer2));
//     ESP_ERROR_CHECK(mcpwm_timer_start_stop(timer2, MCPWM_TIMER_START_NO_STOP));
// }

void set_motor_speed(motor_pwm_t *motor_pwm, float speed_percent) {
    if (speed_percent < 0) speed_percent = 0;
    if (speed_percent > 100) speed_percent = 100;

    uint32_t compare_value = (TIMER_RESOLUTION_HZ / PWM_FREQUENCY_HZ) * (speed_percent / 100.0);
    ESP_ERROR_CHECK(mcpwm_comparator_set_compare_value(motor_pwm->comparator, compare_value));
}

void set_motor_speed_pwm_pair(motor_pwm_t *motor_pwm1,motor_pwm_t *motor_pwm2, float speed_percent) {
    uint32_t compare_value = (int)((TIMER_RESOLUTION_HZ / PWM_FREQUENCY_HZ) * (abs(speed_percent) / 100.0));
    printf("%d\n", compare_value);
    if (speed_percent < 0) { // reverse
      if (speed_percent < 100) speed_percent = -100;
      digitalWrite(motor_pwm1->pin, 0);
      ESP_ERROR_CHECK(mcpwm_comparator_set_compare_value(motor_pwm2->comparator, compare_value));
    } else if (speed_percent == 0) { // stop
      digitalWrite(motor_pwm1->pin, 0);
      digitalWrite(motor_pwm2->pin, 0);
    } else { // forward
      if (speed_percent > 100) speed_percent = 100;
      ESP_ERROR_CHECK(mcpwm_comparator_set_compare_value(motor_pwm1->comparator, compare_value));
      digitalWrite(motor_pwm2->pin, 0);
    }
}

motor_pwm_t motor1_in1 = {
    .pin = MOTOR1_IN1_GPIO,
};
motor_pwm_t motor1_in2 = {
    .pin = MOTOR1_IN2_GPIO,
};

motor_pwm_t motor2_in1 = {
    .pin = MOTOR2_IN1_GPIO,
};
motor_pwm_t motor2_in2  = {
    .pin = MOTOR2_IN2_GPIO,
};
void setup() {
    Serial.begin(115200);
    pinMode(LED_BUILTIN, OUTPUT);
    pinMode (PIN_SWITCH_01, OUTPUT);
    RemoteXY_Init (); 

    Serial.println("Initializing MCPWM...");
    setup_motor_pwm(&motor1_in1, 0);
    setup_motor_pwm(&motor1_in2, 0);
    // setup_motor_pwm(&motor2_in1, 0);
    // setup_motor_pwm(&motor2_in2, 0);
    setup_direction_pins();
    // start_motors();
    
    // set_motor_direction(1, true);  // Motor 1 forward
    // set_motor_direction(2, false);  // Motor 2 backward

    // set_motor_speed(&motor1_in1, 50.0);  // Motor 1 at 50% speed
    // set_motor_speed(&motor1_in2, 75.0);  // Motor 2 at 75% speed
}

void loop() {
  RemoteXY_Handler ();
  digitalWrite(PIN_SWITCH_01, RemoteXY.switch_01);
  RemoteXY_delay(1000);
  float left = 1.0f;
  float right = 1.0f;
  if (RemoteXY.slider_02 > 5) {
    right = 1 - ((float)RemoteXY.slider_02)/100;
  }
  if (RemoteXY.slider_02 < 5) {
    left = 1 - (-1 * ((float)RemoteXY.slider_02))/100;
  }

  int throttle = RemoteXY.slider_01;
  int leftspeed = ((float)RemoteXY.slider_01) * left;
  int rightspeed = ((float)RemoteXY.slider_01) * right;
  neopixelWrite(RGB_BUILTIN, RemoteXY.slider_01 * 0.64, leftspeed  * 0.64 , rightspeed * 0.64); 
    // Optionally adjust PWM duty cycle dynamically
  // printf("IDF loop throttle=%d left=%d right=%d \n", throttle, leftspeed, rightspeed);
  printf("IDF loop throttle=%d left_right=%d \n", RemoteXY.slider_01, RemoteXY.slider_02);
  // set_motor_speed_pwm_pair(&motor1_in1, &motor1_in2, RemoteXY.slider_02);
  set_motor_speed_pwm_pair(&motor2_in1, &motor2_in2, (float)RemoteXY.slider_02);
  Serial.println("Hello from loop");
}